{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { flatten } from '../../utils/array.js';\nimport { isComplex } from '../../utils/is.js';\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    abs = _ref.abs,\n    addScalar = _ref.addScalar,\n    divideScalar = _ref.divideScalar,\n    multiplyScalar = _ref.multiplyScalar,\n    sqrt = _ref.sqrt,\n    smaller = _ref.smaller,\n    isPositive = _ref.isPositive;\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  return typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: _hypot,\n    Matrix: function Matrix(M) {\n      return _hypot(flatten(M.toArray()));\n    }\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n    for (var i = 0; i < args.length; i++) {\n      if (isComplex(args[i])) {\n        throw new TypeError('Unexpected type of argument to hypot');\n      }\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n    return multiplyScalar(largest, sqrt(result));\n  }\n});","map":{"version":3,"names":["factory","flatten","isComplex","name","dependencies","createHypot","_ref","typed","abs","addScalar","divideScalar","multiplyScalar","sqrt","smaller","isPositive","_hypot","Array","Matrix","M","toArray","args","result","largest","i","length","TypeError","value"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/function/arithmetic/hypot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { flatten } from '../../utils/array.js';\nimport { isComplex } from '../../utils/is.js';\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    sqrt,\n    smaller,\n    isPositive\n  } = _ref;\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  return typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: _hypot,\n    Matrix: M => _hypot(flatten(M.toArray()))\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n    for (var i = 0; i < args.length; i++) {\n      if (isComplex(args[i])) {\n        throw new TypeError('Unexpected type of argument to hypot');\n      }\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n    return multiplyScalar(largest, sqrt(result));\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY,CAAC;AACnH,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAAE,IAAI,EAAI;EAC1E,IACEC,KAAK,GAQHD,IAAI,CARNC,KAAK;IACLC,GAAG,GAODF,IAAI,CAPNE,GAAG;IACHC,SAAS,GAMPH,IAAI,CANNG,SAAS;IACTC,YAAY,GAKVJ,IAAI,CALNI,YAAY;IACZC,cAAc,GAIZL,IAAI,CAJNK,cAAc;IACdC,IAAI,GAGFN,IAAI,CAHNM,IAAI;IACJC,OAAO,GAELP,IAAI,CAFNO,OAAO;IACPC,UAAU,GACRR,IAAI,CADNQ,UAAU;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOP,KAAK,CAACJ,IAAI,EAAE;IACjB,wBAAwB,EAAEY,MAAM;IAChCC,KAAK,EAAED,MAAM;IACbE,MAAM,EAAE,gBAAAC,CAAC;MAAA,OAAIH,MAAM,CAACd,OAAO,CAACiB,CAAC,CAACC,OAAO,EAAE,CAAC,CAAC;IAAA;EAC3C,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASJ,MAAM,CAACK,IAAI,EAAE;IACpB;IACA;IACA,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,OAAO,GAAG,CAAC;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIrB,SAAS,CAACkB,IAAI,CAACG,CAAC,CAAC,CAAC,EAAE;QACtB,MAAM,IAAIE,SAAS,CAAC,sCAAsC,CAAC;MAC7D;MACA,IAAIC,KAAK,GAAGlB,GAAG,CAACY,IAAI,CAACG,CAAC,CAAC,CAAC;MACxB,IAAIV,OAAO,CAACS,OAAO,EAAEI,KAAK,CAAC,EAAE;QAC3BL,MAAM,GAAGV,cAAc,CAACU,MAAM,EAAEV,cAAc,CAACD,YAAY,CAACY,OAAO,EAAEI,KAAK,CAAC,EAAEhB,YAAY,CAACY,OAAO,EAAEI,KAAK,CAAC,CAAC,CAAC;QAC3GL,MAAM,GAAGZ,SAAS,CAACY,MAAM,EAAE,CAAC,CAAC;QAC7BC,OAAO,GAAGI,KAAK;MACjB,CAAC,MAAM;QACLL,MAAM,GAAGZ,SAAS,CAACY,MAAM,EAAEP,UAAU,CAACY,KAAK,CAAC,GAAGf,cAAc,CAACD,YAAY,CAACgB,KAAK,EAAEJ,OAAO,CAAC,EAAEZ,YAAY,CAACgB,KAAK,EAAEJ,OAAO,CAAC,CAAC,GAAGI,KAAK,CAAC;MACpI;IACF;IACA,OAAOf,cAAc,CAACW,OAAO,EAAEV,IAAI,CAACS,MAAM,CAAC,CAAC;EAC9C;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}