{"ast":null,"code":"import _classCallCheck from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode, isConstantNode, isOperatorNode, isParenthesisNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty, isSafeMethod } from '../../utils/customs.js';\nimport { getAssociativity, getPrecedence, isAssociativeWith, properties } from '../operators.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'OperatorNode';\nvar dependencies = ['Node'];\nexport var createOperatorNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\n   * Returns true if the expression starts with a constant, under\n   * the current parenthesization:\n   * @param {Node} expression\n   * @param {string} parenthesis\n   * @return {boolean}\n   */\n  function startsWithConstant(expr, parenthesis) {\n    var curNode = expr;\n    if (parenthesis === 'auto') {\n      while (isParenthesisNode(curNode)) {\n        curNode = curNode.content;\n      }\n    }\n    if (isConstantNode(curNode)) return true;\n    if (isOperatorNode(curNode)) {\n      return startsWithConstant(curNode.args[0], parenthesis);\n    }\n    return false;\n  }\n\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = getPrecedence(root, parenthesis, implicit);\n    var associativity = getAssociativity(root, parenthesis);\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      return args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n          default:\n            return true;\n        }\n      });\n    }\n    var result;\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n      case 1:\n        // unary operators\n        {\n          // precedence of the operand\n          var operandPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex && operandPrecedence !== null) {\n            var operandIdentifier;\n            var rootIdentifier;\n            if (parenthesis === 'keep') {\n              operandIdentifier = args[0].getIdentifier();\n              rootIdentifier = root.getIdentifier();\n            } else {\n              // Ignore Parenthesis Nodes when not in 'keep' mode\n              operandIdentifier = args[0].getContent().getIdentifier();\n              rootIdentifier = root.getContent().getIdentifier();\n            }\n            if (properties[precedence][rootIdentifier].latexLeftParens === false) {\n              result = [false];\n              break;\n            }\n            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {\n              result = [false];\n              break;\n            }\n          }\n          if (operandPrecedence === null) {\n            // if the operand has no defined precedence, no parens are needed\n            result = [false];\n            break;\n          }\n          if (operandPrecedence <= precedence) {\n            // if the operands precedence is lower, parens are needed\n            result = [true];\n            break;\n          }\n\n          // otherwise, no parens needed\n          result = [false];\n        }\n        break;\n      case 2:\n        // binary operators\n        {\n          var lhsParens; // left hand side needs parenthesis?\n          // precedence of the left hand side\n          var lhsPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n          // is the root node associative with the left hand side\n          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);\n          if (lhsPrecedence === null) {\n            // if the left hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            lhsParens = false;\n          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n            // In case of equal precedence, if the root node is left associative\n            // parens are **never** necessary for the left hand side.\n            // If it is right associative however, parens are necessary\n            // if the root node isn't associative with the left hand side\n            lhsParens = true;\n          } else if (lhsPrecedence < precedence) {\n            lhsParens = true;\n          } else {\n            lhsParens = false;\n          }\n          var rhsParens; // right hand side needs parenthesis?\n          // precedence of the right hand side\n          var rhsPrecedence = getPrecedence(args[1], parenthesis, implicit, root);\n          // is the root node associative with the right hand side?\n          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);\n          if (rhsPrecedence === null) {\n            // if the right hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            rhsParens = false;\n          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n            // In case of equal precedence, if the root node is right associative\n            // parens are **never** necessary for the right hand side.\n            // If it is left associative however, parens are necessary\n            // if the root node isn't associative with the right hand side\n            rhsParens = true;\n          } else if (rhsPrecedence < precedence) {\n            rhsParens = true;\n          } else {\n            rhsParens = false;\n          }\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex) {\n            var _rootIdentifier;\n            var lhsIdentifier;\n            var rhsIdentifier;\n            if (parenthesis === 'keep') {\n              _rootIdentifier = root.getIdentifier();\n              lhsIdentifier = root.args[0].getIdentifier();\n              rhsIdentifier = root.args[1].getIdentifier();\n            } else {\n              // Ignore ParenthesisNodes when not in 'keep' mode\n              _rootIdentifier = root.getContent().getIdentifier();\n              lhsIdentifier = root.args[0].getContent().getIdentifier();\n              rhsIdentifier = root.args[1].getContent().getIdentifier();\n            }\n            if (lhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {\n                lhsParens = false;\n              }\n              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n                lhsParens = false;\n              }\n            }\n            if (rhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexRightParens === false) {\n                rhsParens = false;\n              }\n              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n                rhsParens = false;\n              }\n            }\n          }\n          result = [lhsParens, rhsParens];\n        }\n        break;\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = getPrecedence(arg, parenthesis, implicit, root);\n            var assocWithArg = isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = getAssociativity(arg, parenthesis);\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n            return false;\n          });\n        }\n        break;\n    }\n\n    // Handles an edge case of parentheses with implicit multiplication\n    // of ConstantNode.\n    // In that case, parenthesize ConstantNodes that follow an unparenthesized\n    // expression, even though they normally wouldn't be printed.\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis !== 'all' && implicit === 'hide') {\n      for (var i = 1; i < result.length; ++i) {\n        if (startsWithConstant(args[i], parenthesis) && !result[i - 1] && (parenthesis !== 'keep' || !isParenthesisNode(args[i - 1]))) {\n          result[i] = true;\n        }\n      }\n    }\n    return result;\n  }\n  var OperatorNode = /*#__PURE__*/function (_Node) {\n    _inherits(OperatorNode, _Node);\n    var _super = _createSuper(OperatorNode);\n    /**\n     * @constructor OperatorNode\n     * @extends {Node}\n     * An operator with two arguments, like 2+3\n     *\n     * @param {string} op           Operator name, for example '+'\n     * @param {string} fn           Function name, for example 'add'\n     * @param {Node[]} args         Operator arguments\n     * @param {boolean} [implicit]  Is this an implicit multiplication?\n     * @param {boolean} [isPercentage] Is this an percentage Operation?\n     */\n    function OperatorNode(op, fn, args, implicit, isPercentage) {\n      var _this;\n      _classCallCheck(this, OperatorNode);\n      _this = _super.call(this);\n      // validate input\n      if (typeof op !== 'string') {\n        throw new TypeError('string expected for parameter \"op\"');\n      }\n      if (typeof fn !== 'string') {\n        throw new TypeError('string expected for parameter \"fn\"');\n      }\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      _this.implicit = implicit === true;\n      _this.isPercentage = isPercentage === true;\n      _this.op = op;\n      _this.fn = fn;\n      _this.args = args || [];\n      return _this;\n    }\n    _createClass(OperatorNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isOperatorNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        // validate fn\n        if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n          if (!math[this.fn]) {\n            throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n          } else {\n            throw new Error('No access to function \"' + this.fn + '\"');\n          }\n        }\n        var fn = getSafeProperty(math, this.fn);\n        var evalArgs = map(this.args, function (arg) {\n          return arg._compile(math, argNames);\n        });\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalOperatorNode(scope, args, context) {\n            return fn(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalOperatorNode(scope, args, context) {\n            return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalOperatorNode(scope, args, context) {\n            return fn.apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.args.length; i++) {\n          callback(this.args[i], 'args[' + i + ']', this);\n        }\n      }\n\n      /**\n       * Create a new OperatorNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {OperatorNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var args = [];\n        for (var i = 0; i < this.args.length; i++) {\n          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n        }\n        return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {OperatorNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);\n      }\n\n      /**\n       * Check whether this is an unary OperatorNode:\n       * has exactly one argument, like `-a`.\n       * @return {boolean}\n       *     Returns true when an unary operator node, false otherwise.\n       */\n    }, {\n      key: \"isUnary\",\n      value: function isUnary() {\n        return this.args.length === 1;\n      }\n\n      /**\n       * Check whether this is a binary OperatorNode:\n       * has exactly two arguments, like `a + b`.\n       * @return {boolean}\n       *     Returns true when a binary operator node, false otherwise.\n       */\n    }, {\n      key: \"isBinary\",\n      value: function isBinary() {\n        return this.args.length === 2;\n      }\n\n      /**\n       * Get string representation.\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var implicit = options && options.implicit ? options.implicit : 'hide';\n        var args = this.args;\n        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n        if (args.length === 1) {\n          // unary operators\n          var assoc = getAssociativity(this, parenthesis);\n          var operand = args[0].toString(options);\n          if (parens[0]) {\n            operand = '(' + operand + ')';\n          }\n\n          // for example for \"not\", we want a space between operand and argument\n          var opIsNamed = /[a-zA-Z]+/.test(this.op);\n          if (assoc === 'right') {\n            // prefix operator\n            return this.op + (opIsNamed ? ' ' : '') + operand;\n          } else if (assoc === 'left') {\n            // postfix\n            return operand + (opIsNamed ? ' ' : '') + this.op;\n          }\n\n          // fall back to postfix\n          return operand + this.op;\n        } else if (args.length === 2) {\n          var lhs = args[0].toString(options); // left hand side\n          var rhs = args[1].toString(options); // right hand side\n          if (parens[0]) {\n            // left hand side in parenthesis?\n            lhs = '(' + lhs + ')';\n          }\n          if (parens[1]) {\n            // right hand side in parenthesis?\n            rhs = '(' + rhs + ')';\n          }\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return lhs + ' ' + rhs;\n          }\n          return lhs + ' ' + this.op + ' ' + rhs;\n        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n          var stringifiedArgs = args.map(function (arg, index) {\n            arg = arg.toString(options);\n            if (parens[index]) {\n              // put in parenthesis?\n              arg = '(' + arg + ')';\n            }\n            return arg;\n          });\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return stringifiedArgs.join(' ');\n          }\n          return stringifiedArgs.join(' ' + this.op + ' ');\n        } else {\n          // fallback to formatting as a function call\n          return this.fn + '(' + this.args.join(', ') + ')';\n        }\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          op: this.op,\n          fn: this.fn,\n          args: this.args,\n          implicit: this.implicit,\n          isPercentage: this.isPercentage\n        };\n      }\n\n      /**\n       * Instantiate an OperatorNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     ```\n       *     {\"mathjs\": \"OperatorNode\",\n       *      \"op\": \"+\", \"fn\": \"add\", \"args\": [...],\n       *      \"implicit\": false,\n       *      \"isPercentage\":false}\n       *     ```\n       *     where mathjs is optional\n       * @returns {OperatorNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation.\n       * @param {Object} options\n       * @return {string} str\n       */\n      function toHTML(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var implicit = options && options.implicit ? options.implicit : 'hide';\n        var args = this.args;\n        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n        if (args.length === 1) {\n          // unary operators\n          var assoc = getAssociativity(this, parenthesis);\n          var operand = args[0].toHTML(options);\n          if (parens[0]) {\n            operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          if (assoc === 'right') {\n            // prefix operator\n            return '<span class=\"math-operator math-unary-operator ' + 'math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n          } else {\n            // postfix when assoc === 'left' or undefined\n            return operand + '<span class=\"math-operator math-unary-operator ' + 'math-righthand-unary-operator\">' + escape(this.op) + '</span>';\n          }\n        } else if (args.length === 2) {\n          // binary operatoes\n          var lhs = args[0].toHTML(options); // left hand side\n          var rhs = args[1].toHTML(options); // right hand side\n          if (parens[0]) {\n            // left hand side in parenthesis?\n            lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          if (parens[1]) {\n            // right hand side in parenthesis?\n            rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>' + rhs;\n          }\n          return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n        } else {\n          var stringifiedArgs = args.map(function (arg, index) {\n            arg = arg.toHTML(options);\n            if (parens[index]) {\n              // put in parenthesis?\n              arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n            }\n            return arg;\n          });\n          if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n            if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n              return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>');\n            }\n            return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n          } else {\n            // fallback to formatting as a function call\n            return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">' + '(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n          }\n        }\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var implicit = options && options.implicit ? options.implicit : 'hide';\n        var args = this.args;\n        var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n        var op = latexOperators[this.fn];\n        op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n        if (args.length === 1) {\n          // unary operators\n          var assoc = getAssociativity(this, parenthesis);\n          var operand = args[0].toTex(options);\n          if (parens[0]) {\n            operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n          }\n          if (assoc === 'right') {\n            // prefix operator\n            return op + operand;\n          } else if (assoc === 'left') {\n            // postfix operator\n            return operand + op;\n          }\n\n          // fall back to postfix\n          return operand + op;\n        } else if (args.length === 2) {\n          // binary operators\n          var lhs = args[0]; // left hand side\n          var lhsTex = lhs.toTex(options);\n          if (parens[0]) {\n            lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n          }\n          var rhs = args[1]; // right hand side\n          var rhsTex = rhs.toTex(options);\n          if (parens[1]) {\n            rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n          }\n\n          // handle some exceptions (due to the way LaTeX works)\n          var lhsIdentifier;\n          if (parenthesis === 'keep') {\n            lhsIdentifier = lhs.getIdentifier();\n          } else {\n            // Ignore ParenthesisNodes if in 'keep' mode\n            lhsIdentifier = lhs.getContent().getIdentifier();\n          }\n          switch (this.getIdentifier()) {\n            case 'OperatorNode:divide':\n              // op contains '\\\\frac' at this point\n              return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n            case 'OperatorNode:pow':\n              lhsTex = '{' + lhsTex + '}';\n              rhsTex = '{' + rhsTex + '}';\n              switch (lhsIdentifier) {\n                case 'ConditionalNode': //\n                case 'OperatorNode:divide':\n                  lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n              }\n              break;\n            case 'OperatorNode:multiply':\n              if (this.implicit && implicit === 'hide') {\n                return lhsTex + '~' + rhsTex;\n              }\n          }\n          return lhsTex + op + rhsTex;\n        } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n          var texifiedArgs = args.map(function (arg, index) {\n            arg = arg.toTex(options);\n            if (parens[index]) {\n              arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n            }\n            return arg;\n          });\n          if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit && implicit === 'hide') {\n            return texifiedArgs.join('~');\n          }\n          return texifiedArgs.join(op);\n        } else {\n          // fall back to formatting as a function call\n          // as this is a fallback, it doesn't use\n          // fancy function names\n          return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n            return arg.toTex(options);\n          }).join(',') + '\\\\right)';\n        }\n      }\n\n      /**\n       * Get identifier.\n       * @return {string}\n       */\n    }, {\n      key: \"getIdentifier\",\n      value: function getIdentifier() {\n        return this.type + ':' + this.fn;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);\n      }\n    }]);\n    return OperatorNode;\n  }(Node);\n  _defineProperty(OperatorNode, \"name\", name);\n  return OperatorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","isConstantNode","isOperatorNode","isParenthesisNode","map","escape","getSafeProperty","isSafeMethod","getAssociativity","getPrecedence","isAssociativeWith","properties","latexOperators","factory","name","dependencies","createOperatorNode","_ref","Node","startsWithConstant","expr","parenthesis","curNode","content","args","calculateNecessaryParentheses","root","implicit","latex","precedence","associativity","length","getIdentifier","arg","getContent","type","result","operandPrecedence","operandIdentifier","rootIdentifier","latexLeftParens","latexParens","lhsParens","lhsPrecedence","assocWithLhs","rhsParens","rhsPrecedence","assocWithRhs","_rootIdentifier","lhsIdentifier","rhsIdentifier","latexRightParens","argPrecedence","assocWithArg","argAssociativity","i","OperatorNode","op","fn","isPercentage","TypeError","Array","isArray","every","math","argNames","Error","evalArgs","_compile","evalArg0","evalOperatorNode","scope","context","_evalArg","evalArg1","apply","evalArg","callback","_ifNode","slice","options","parens","assoc","operand","toString","opIsNamed","test","lhs","rhs","stringifiedArgs","index","join","mathjs","toHTML","toTex","concat","lhsTex","rhsTex","texifiedArgs","json","isClass"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/expression/node/OperatorNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode, isConstantNode, isOperatorNode, isParenthesisNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty, isSafeMethod } from '../../utils/customs.js';\nimport { getAssociativity, getPrecedence, isAssociativeWith, properties } from '../operators.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'OperatorNode';\nvar dependencies = ['Node'];\nexport var createOperatorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  /**\n   * Returns true if the expression starts with a constant, under\n   * the current parenthesization:\n   * @param {Node} expression\n   * @param {string} parenthesis\n   * @return {boolean}\n   */\n  function startsWithConstant(expr, parenthesis) {\n    var curNode = expr;\n    if (parenthesis === 'auto') {\n      while (isParenthesisNode(curNode)) {\n        curNode = curNode.content;\n      }\n    }\n    if (isConstantNode(curNode)) return true;\n    if (isOperatorNode(curNode)) {\n      return startsWithConstant(curNode.args[0], parenthesis);\n    }\n    return false;\n  }\n\n  /**\n   * Calculate which parentheses are necessary. Gets an OperatorNode\n   * (which is the root of the tree) and an Array of Nodes\n   * (this.args) and returns an array where 'true' means that an argument\n   * has to be enclosed in parentheses whereas 'false' means the opposite.\n   *\n   * @param {OperatorNode} root\n   * @param {string} parenthesis\n   * @param {Node[]} args\n   * @param {boolean} latex\n   * @return {boolean[]}\n   * @private\n   */\n  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {\n    // precedence of the root OperatorNode\n    var precedence = getPrecedence(root, parenthesis, implicit);\n    var associativity = getAssociativity(root, parenthesis);\n    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {\n      return args.map(function (arg) {\n        switch (arg.getContent().type) {\n          // Nodes that don't need extra parentheses\n          case 'ArrayNode':\n          case 'ConstantNode':\n          case 'SymbolNode':\n          case 'ParenthesisNode':\n            return false;\n          default:\n            return true;\n        }\n      });\n    }\n    var result;\n    switch (args.length) {\n      case 0:\n        result = [];\n        break;\n      case 1:\n        // unary operators\n        {\n          // precedence of the operand\n          var operandPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex && operandPrecedence !== null) {\n            var operandIdentifier;\n            var rootIdentifier;\n            if (parenthesis === 'keep') {\n              operandIdentifier = args[0].getIdentifier();\n              rootIdentifier = root.getIdentifier();\n            } else {\n              // Ignore Parenthesis Nodes when not in 'keep' mode\n              operandIdentifier = args[0].getContent().getIdentifier();\n              rootIdentifier = root.getContent().getIdentifier();\n            }\n            if (properties[precedence][rootIdentifier].latexLeftParens === false) {\n              result = [false];\n              break;\n            }\n            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {\n              result = [false];\n              break;\n            }\n          }\n          if (operandPrecedence === null) {\n            // if the operand has no defined precedence, no parens are needed\n            result = [false];\n            break;\n          }\n          if (operandPrecedence <= precedence) {\n            // if the operands precedence is lower, parens are needed\n            result = [true];\n            break;\n          }\n\n          // otherwise, no parens needed\n          result = [false];\n        }\n        break;\n      case 2:\n        // binary operators\n        {\n          var lhsParens; // left hand side needs parenthesis?\n          // precedence of the left hand side\n          var lhsPrecedence = getPrecedence(args[0], parenthesis, implicit, root);\n          // is the root node associative with the left hand side\n          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);\n          if (lhsPrecedence === null) {\n            // if the left hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            lhsParens = false;\n          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {\n            // In case of equal precedence, if the root node is left associative\n            // parens are **never** necessary for the left hand side.\n            // If it is right associative however, parens are necessary\n            // if the root node isn't associative with the left hand side\n            lhsParens = true;\n          } else if (lhsPrecedence < precedence) {\n            lhsParens = true;\n          } else {\n            lhsParens = false;\n          }\n          var rhsParens; // right hand side needs parenthesis?\n          // precedence of the right hand side\n          var rhsPrecedence = getPrecedence(args[1], parenthesis, implicit, root);\n          // is the root node associative with the right hand side?\n          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);\n          if (rhsPrecedence === null) {\n            // if the right hand side has no defined precedence, no parens are needed\n            // FunctionNode for example\n            rhsParens = false;\n          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {\n            // In case of equal precedence, if the root node is right associative\n            // parens are **never** necessary for the right hand side.\n            // If it is left associative however, parens are necessary\n            // if the root node isn't associative with the right hand side\n            rhsParens = true;\n          } else if (rhsPrecedence < precedence) {\n            rhsParens = true;\n          } else {\n            rhsParens = false;\n          }\n\n          // handle special cases for LaTeX, where some of the parentheses aren't needed\n          if (latex) {\n            var _rootIdentifier;\n            var lhsIdentifier;\n            var rhsIdentifier;\n            if (parenthesis === 'keep') {\n              _rootIdentifier = root.getIdentifier();\n              lhsIdentifier = root.args[0].getIdentifier();\n              rhsIdentifier = root.args[1].getIdentifier();\n            } else {\n              // Ignore ParenthesisNodes when not in 'keep' mode\n              _rootIdentifier = root.getContent().getIdentifier();\n              lhsIdentifier = root.args[0].getContent().getIdentifier();\n              rhsIdentifier = root.args[1].getContent().getIdentifier();\n            }\n            if (lhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {\n                lhsParens = false;\n              }\n              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {\n                lhsParens = false;\n              }\n            }\n            if (rhsPrecedence !== null) {\n              if (properties[precedence][_rootIdentifier].latexRightParens === false) {\n                rhsParens = false;\n              }\n              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {\n                rhsParens = false;\n              }\n            }\n          }\n          result = [lhsParens, rhsParens];\n        }\n        break;\n      default:\n        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {\n          result = args.map(function (arg) {\n            var argPrecedence = getPrecedence(arg, parenthesis, implicit, root);\n            var assocWithArg = isAssociativeWith(root, arg, parenthesis);\n            var argAssociativity = getAssociativity(arg, parenthesis);\n            if (argPrecedence === null) {\n              // if the argument has no defined precedence, no parens are needed\n              return false;\n            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {\n              return true;\n            } else if (argPrecedence < precedence) {\n              return true;\n            }\n            return false;\n          });\n        }\n        break;\n    }\n\n    // Handles an edge case of parentheses with implicit multiplication\n    // of ConstantNode.\n    // In that case, parenthesize ConstantNodes that follow an unparenthesized\n    // expression, even though they normally wouldn't be printed.\n    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis !== 'all' && implicit === 'hide') {\n      for (var i = 1; i < result.length; ++i) {\n        if (startsWithConstant(args[i], parenthesis) && !result[i - 1] && (parenthesis !== 'keep' || !isParenthesisNode(args[i - 1]))) {\n          result[i] = true;\n        }\n      }\n    }\n    return result;\n  }\n  class OperatorNode extends Node {\n    /**\n     * @constructor OperatorNode\n     * @extends {Node}\n     * An operator with two arguments, like 2+3\n     *\n     * @param {string} op           Operator name, for example '+'\n     * @param {string} fn           Function name, for example 'add'\n     * @param {Node[]} args         Operator arguments\n     * @param {boolean} [implicit]  Is this an implicit multiplication?\n     * @param {boolean} [isPercentage] Is this an percentage Operation?\n     */\n    constructor(op, fn, args, implicit, isPercentage) {\n      super();\n      // validate input\n      if (typeof op !== 'string') {\n        throw new TypeError('string expected for parameter \"op\"');\n      }\n      if (typeof fn !== 'string') {\n        throw new TypeError('string expected for parameter \"fn\"');\n      }\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.implicit = implicit === true;\n      this.isPercentage = isPercentage === true;\n      this.op = op;\n      this.fn = fn;\n      this.args = args || [];\n    }\n    get type() {\n      return name;\n    }\n    get isOperatorNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // validate fn\n      if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {\n        if (!math[this.fn]) {\n          throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');\n        } else {\n          throw new Error('No access to function \"' + this.fn + '\"');\n        }\n      }\n      var fn = getSafeProperty(math, this.fn);\n      var evalArgs = map(this.args, function (arg) {\n        return arg._compile(math, argNames);\n      });\n      if (evalArgs.length === 1) {\n        var evalArg0 = evalArgs[0];\n        return function evalOperatorNode(scope, args, context) {\n          return fn(evalArg0(scope, args, context));\n        };\n      } else if (evalArgs.length === 2) {\n        var _evalArg = evalArgs[0];\n        var evalArg1 = evalArgs[1];\n        return function evalOperatorNode(scope, args, context) {\n          return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));\n        };\n      } else {\n        return function evalOperatorNode(scope, args, context) {\n          return fn.apply(null, map(evalArgs, function (evalArg) {\n            return evalArg(scope, args, context);\n          }));\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new OperatorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {OperatorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new OperatorNode(this.op, this.fn, args, this.implicit, this.isPercentage);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {OperatorNode}\n     */\n    clone() {\n      return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit, this.isPercentage);\n    }\n\n    /**\n     * Check whether this is an unary OperatorNode:\n     * has exactly one argument, like `-a`.\n     * @return {boolean}\n     *     Returns true when an unary operator node, false otherwise.\n     */\n    isUnary() {\n      return this.args.length === 1;\n    }\n\n    /**\n     * Check whether this is a binary OperatorNode:\n     * has exactly two arguments, like `a + b`.\n     * @return {boolean}\n     *     Returns true when a binary operator node, false otherwise.\n     */\n    isBinary() {\n      return this.args.length === 2;\n    }\n\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var implicit = options && options.implicit ? options.implicit : 'hide';\n      var args = this.args;\n      var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n      if (args.length === 1) {\n        // unary operators\n        var assoc = getAssociativity(this, parenthesis);\n        var operand = args[0].toString(options);\n        if (parens[0]) {\n          operand = '(' + operand + ')';\n        }\n\n        // for example for \"not\", we want a space between operand and argument\n        var opIsNamed = /[a-zA-Z]+/.test(this.op);\n        if (assoc === 'right') {\n          // prefix operator\n          return this.op + (opIsNamed ? ' ' : '') + operand;\n        } else if (assoc === 'left') {\n          // postfix\n          return operand + (opIsNamed ? ' ' : '') + this.op;\n        }\n\n        // fall back to postfix\n        return operand + this.op;\n      } else if (args.length === 2) {\n        var lhs = args[0].toString(options); // left hand side\n        var rhs = args[1].toString(options); // right hand side\n        if (parens[0]) {\n          // left hand side in parenthesis?\n          lhs = '(' + lhs + ')';\n        }\n        if (parens[1]) {\n          // right hand side in parenthesis?\n          rhs = '(' + rhs + ')';\n        }\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return lhs + ' ' + rhs;\n        }\n        return lhs + ' ' + this.op + ' ' + rhs;\n      } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        var stringifiedArgs = args.map(function (arg, index) {\n          arg = arg.toString(options);\n          if (parens[index]) {\n            // put in parenthesis?\n            arg = '(' + arg + ')';\n          }\n          return arg;\n        });\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return stringifiedArgs.join(' ');\n        }\n        return stringifiedArgs.join(' ' + this.op + ' ');\n      } else {\n        // fallback to formatting as a function call\n        return this.fn + '(' + this.args.join(', ') + ')';\n      }\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        op: this.op,\n        fn: this.fn,\n        args: this.args,\n        implicit: this.implicit,\n        isPercentage: this.isPercentage\n      };\n    }\n\n    /**\n     * Instantiate an OperatorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"OperatorNode\",\n     *      \"op\": \"+\", \"fn\": \"add\", \"args\": [...],\n     *      \"implicit\": false,\n     *      \"isPercentage\":false}\n     *     ```\n     *     where mathjs is optional\n     * @returns {OperatorNode}\n     */\n    static fromJSON(json) {\n      return new OperatorNode(json.op, json.fn, json.args, json.implicit, json.isPercentage);\n    }\n\n    /**\n     * Get HTML representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var implicit = options && options.implicit ? options.implicit : 'hide';\n      var args = this.args;\n      var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);\n      if (args.length === 1) {\n        // unary operators\n        var assoc = getAssociativity(this, parenthesis);\n        var operand = args[0].toHTML(options);\n        if (parens[0]) {\n          operand = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + operand + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        if (assoc === 'right') {\n          // prefix operator\n          return '<span class=\"math-operator math-unary-operator ' + 'math-lefthand-unary-operator\">' + escape(this.op) + '</span>' + operand;\n        } else {\n          // postfix when assoc === 'left' or undefined\n          return operand + '<span class=\"math-operator math-unary-operator ' + 'math-righthand-unary-operator\">' + escape(this.op) + '</span>';\n        }\n      } else if (args.length === 2) {\n        // binary operatoes\n        var lhs = args[0].toHTML(options); // left hand side\n        var rhs = args[1].toHTML(options); // right hand side\n        if (parens[0]) {\n          // left hand side in parenthesis?\n          lhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + lhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        if (parens[1]) {\n          // right hand side in parenthesis?\n          rhs = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + rhs + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n          return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>' + rhs;\n        }\n        return lhs + '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>' + rhs;\n      } else {\n        var stringifiedArgs = args.map(function (arg, index) {\n          arg = arg.toHTML(options);\n          if (parens[index]) {\n            // put in parenthesis?\n            arg = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + arg + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n          }\n          return arg;\n        });\n        if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n          if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {\n            return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-implicit-binary-operator\"></span>');\n          }\n          return stringifiedArgs.join('<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(this.op) + '</span>');\n        } else {\n          // fallback to formatting as a function call\n          return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">' + '(</span>' + stringifiedArgs.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n      }\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var implicit = options && options.implicit ? options.implicit : 'hide';\n      var args = this.args;\n      var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);\n      var op = latexOperators[this.fn];\n      op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op\n\n      if (args.length === 1) {\n        // unary operators\n        var assoc = getAssociativity(this, parenthesis);\n        var operand = args[0].toTex(options);\n        if (parens[0]) {\n          operand = \"\\\\left(\".concat(operand, \"\\\\right)\");\n        }\n        if (assoc === 'right') {\n          // prefix operator\n          return op + operand;\n        } else if (assoc === 'left') {\n          // postfix operator\n          return operand + op;\n        }\n\n        // fall back to postfix\n        return operand + op;\n      } else if (args.length === 2) {\n        // binary operators\n        var lhs = args[0]; // left hand side\n        var lhsTex = lhs.toTex(options);\n        if (parens[0]) {\n          lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n        }\n        var rhs = args[1]; // right hand side\n        var rhsTex = rhs.toTex(options);\n        if (parens[1]) {\n          rhsTex = \"\\\\left(\".concat(rhsTex, \"\\\\right)\");\n        }\n\n        // handle some exceptions (due to the way LaTeX works)\n        var lhsIdentifier;\n        if (parenthesis === 'keep') {\n          lhsIdentifier = lhs.getIdentifier();\n        } else {\n          // Ignore ParenthesisNodes if in 'keep' mode\n          lhsIdentifier = lhs.getContent().getIdentifier();\n        }\n        switch (this.getIdentifier()) {\n          case 'OperatorNode:divide':\n            // op contains '\\\\frac' at this point\n            return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';\n          case 'OperatorNode:pow':\n            lhsTex = '{' + lhsTex + '}';\n            rhsTex = '{' + rhsTex + '}';\n            switch (lhsIdentifier) {\n              case 'ConditionalNode': //\n              case 'OperatorNode:divide':\n                lhsTex = \"\\\\left(\".concat(lhsTex, \"\\\\right)\");\n            }\n            break;\n          case 'OperatorNode:multiply':\n            if (this.implicit && implicit === 'hide') {\n              return lhsTex + '~' + rhsTex;\n            }\n        }\n        return lhsTex + op + rhsTex;\n      } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {\n        var texifiedArgs = args.map(function (arg, index) {\n          arg = arg.toTex(options);\n          if (parens[index]) {\n            arg = \"\\\\left(\".concat(arg, \"\\\\right)\");\n          }\n          return arg;\n        });\n        if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit && implicit === 'hide') {\n          return texifiedArgs.join('~');\n        }\n        return texifiedArgs.join(op);\n      } else {\n        // fall back to formatting as a function call\n        // as this is a fallback, it doesn't use\n        // fancy function names\n        return '\\\\mathrm{' + this.fn + '}\\\\left(' + args.map(function (arg) {\n          return arg.toTex(options);\n        }).join(',') + '\\\\right)';\n      }\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.fn;\n    }\n  }\n  _defineProperty(OperatorNode, \"name\", name);\n  return OperatorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}