{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { signNumber } from '../../plain/number/index.js';\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nexport var createSign = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    _BigNumber = _ref.BigNumber,\n    complex = _ref.complex,\n    _Fraction = _ref.Fraction;\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    // deep map collection, skip zeros since sign(0) = 0\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return deepMap(x, self, true);\n      };\n    }),\n    Unit: typed.referToSelf(function (self) {\n      return function (x) {\n        if (!x._isDerived() && x.units[0].unit.offset !== 0) {\n          throw new TypeError('sign is ambiguous for units with offset');\n        }\n        return typed.find(self, x.valueType())(x.value);\n      };\n    })\n  });\n});","map":{"version":3,"names":["factory","deepMap","signNumber","name","dependencies","createSign","_ref","typed","_BigNumber","BigNumber","complex","_Fraction","Fraction","number","Complex","x","im","re","sign","cmp","s","referToSelf","self","Unit","_isDerived","units","unit","offset","TypeError","find","valueType","value"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/function/arithmetic/sign.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { signNumber } from '../../plain/number/index.js';\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nexport var createSign = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber,\n    complex,\n    Fraction: _Fraction\n  } = _ref;\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  return typed(name, {\n    number: signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    // deep map collection, skip zeros since sign(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    Unit: typed.referToSelf(self => x => {\n      if (!x._isDerived() && x.units[0].unit.offset !== 0) {\n        throw new TypeError('sign is ambiguous for units with offset');\n      }\n      return typed.find(self, x.valueType())(x.value);\n    })\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC;AAChE,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAAE,IAAI,EAAI;EACzE,IACEC,KAAK,GAIHD,IAAI,CAJNC,KAAK;IACMC,UAAU,GAGnBF,IAAI,CAHNG,SAAS;IACTC,OAAO,GAELJ,IAAI,CAFNI,OAAO;IACGC,SAAS,GACjBL,IAAI,CADNM,QAAQ;EAEV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAE;IACjBU,MAAM,EAAEX,UAAU;IAClBY,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,EAAE,KAAK,CAAC,GAAGN,OAAO,CAACR,UAAU,CAACa,CAAC,CAACE,EAAE,CAAC,CAAC,GAAGF,CAAC,CAACG,IAAI,EAAE;IAC1D,CAAC;IACDT,SAAS,EAAE,SAASA,SAAS,CAACM,CAAC,EAAE;MAC/B,OAAO,IAAIP,UAAU,CAACO,CAAC,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC;IACDP,QAAQ,EAAE,SAASA,QAAQ,CAACG,CAAC,EAAE;MAC7B,OAAO,IAAIJ,SAAS,CAACI,CAAC,CAACK,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IACD;IACA,gBAAgB,EAAEb,KAAK,CAACc,WAAW,CAAC,UAAAC,IAAI;MAAA,OAAI,UAAAP,CAAC;QAAA,OAAId,OAAO,CAACc,CAAC,EAAEO,IAAI,EAAE,IAAI,CAAC;MAAA;IAAA,EAAC;IACxEC,IAAI,EAAEhB,KAAK,CAACc,WAAW,CAAC,UAAAC,IAAI;MAAA,OAAI,UAAAP,CAAC,EAAI;QACnC,IAAI,CAACA,CAAC,CAACS,UAAU,EAAE,IAAIT,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UACnD,MAAM,IAAIC,SAAS,CAAC,yCAAyC,CAAC;QAChE;QACA,OAAOrB,KAAK,CAACsB,IAAI,CAACP,IAAI,EAAEP,CAAC,CAACe,SAAS,EAAE,CAAC,CAACf,CAAC,CAACgB,KAAK,CAAC;MACjD,CAAC;IAAA;EACH,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}