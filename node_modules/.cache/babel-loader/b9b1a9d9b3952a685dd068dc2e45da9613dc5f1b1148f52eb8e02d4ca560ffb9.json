{"ast":null,"code":"import _classCallCheck from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  var ParenthesisNode = /*#__PURE__*/function (_Node) {\n    _inherits(ParenthesisNode, _Node);\n    var _super = _createSuper(ParenthesisNode);\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    function ParenthesisNode(content) {\n      var _this;\n      _classCallCheck(this, ParenthesisNode);\n      _this = _super.call(this);\n      // validate input\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n      _this.content = content;\n      return _this;\n    }\n    _createClass(ParenthesisNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isParenthesisNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        return this.content._compile(math, argNames);\n      }\n\n      /**\n       * Get the content of the current Node.\n       * @return {Node} content\n       * @override\n       **/\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this.content.getContent();\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.content, 'content', this);\n      }\n\n      /**\n       * Create a new ParenthesisNode whose child is the result of calling\n       * the provided callback function on the child of this node.\n       * @param {function(child: Node, path: string, parent: Node) : Node} callback\n       * @returns {ParenthesisNode} Returns a clone of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var content = callback(this.content, 'content', this);\n        return new ParenthesisNode(content);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ParenthesisNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ParenthesisNode(this.content);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return '(' + this.content.toString(options) + ')';\n        }\n        return this.content.toString(options);\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          content: this.content\n        };\n      }\n\n      /**\n       * Instantiate an ParenthesisNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n       *                       where mathjs is optional\n       * @returns {ParenthesisNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toHTML(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        return this.content.toHTML(options);\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n        }\n        return this.content.toTex(options);\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ParenthesisNode(json.content);\n      }\n    }]);\n    return ParenthesisNode;\n  }(Node);\n  _defineProperty(ParenthesisNode, \"name\", name);\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","factory","name","dependencies","createParenthesisNode","_ref","Node","ParenthesisNode","content","TypeError","math","argNames","_compile","getContent","callback","options","parenthesis","toString","mathjs","toHTML","concat","toTex","json","isClass"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ParenthesisNode extends Node {\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    constructor(content) {\n      super();\n      // validate input\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n      this.content = content;\n    }\n    get type() {\n      return name;\n    }\n    get isParenthesisNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n\n    /**\n     * Get the content of the current Node.\n     * @return {Node} content\n     * @override\n     **/\n    getContent() {\n      return this.content.getContent();\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n\n    /**\n     * Create a new ParenthesisNode whose child is the result of calling\n     * the provided callback function on the child of this node.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ParenthesisNode} Returns a clone of the node\n     */\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ParenthesisNode}\n     */\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n      return this.content.toString(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n\n    /**\n     * Instantiate an ParenthesisNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n     *                       where mathjs is optional\n     * @returns {ParenthesisNode}\n     */\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return this.content.toHTML(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n      return this.content.toTex(options);\n    }\n  }\n  _defineProperty(ParenthesisNode, \"name\", name);\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}