{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Node = _ref.Node;\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  var FunctionAssignmentNode = /*#__PURE__*/function (_Node) {\n    _inherits(FunctionAssignmentNode, _Node);\n    var _super = _createSuper(FunctionAssignmentNode);\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    function FunctionAssignmentNode(name, params, expr) {\n      var _this;\n      _classCallCheck(this, FunctionAssignmentNode);\n      _this = _super.call(this);\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n      var paramNames = new Set();\n      var _iterator = _createForOfIteratorHelper(params),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var param = _step.value;\n          var _name = typeof param === 'string' ? param : param.name;\n          if (paramNames.has(_name)) {\n            throw new Error(\"Duplicate parameter name \\\"\".concat(_name, \"\\\"\"));\n          } else {\n            paramNames.add(_name);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      _this.name = name;\n      _this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      _this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      _this.expr = expr;\n      return _this;\n    }\n    _createClass(FunctionAssignmentNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isFunctionAssignmentNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var childArgNames = Object.create(argNames);\n        forEach(this.params, function (param) {\n          childArgNames[param] = true;\n        });\n\n        // compile the function expression with the child args\n        var evalExpr = this.expr._compile(math, childArgNames);\n        var name = this.name;\n        var params = this.params;\n        var signature = join(this.types, ',');\n        var syntax = name + '(' + join(this.params, ', ') + ')';\n        return function evalFunctionAssignmentNode(scope, args, context) {\n          var signatures = {};\n          signatures[signature] = function () {\n            var childArgs = Object.create(args);\n            for (var i = 0; i < params.length; i++) {\n              childArgs[params[i]] = arguments[i];\n            }\n            return evalExpr(scope, childArgs, context);\n          };\n          var fn = typed(name, signatures);\n          fn.syntax = syntax;\n          scope.set(name, fn);\n          return fn;\n        };\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.expr, 'expr', this);\n      }\n\n      /**\n       * Create a new FunctionAssignmentNode whose children are the results of\n       * calling the provided callback function for each child of the original\n       * node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var expr = this._ifNode(callback(this.expr, 'expr', this));\n        return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {FunctionAssignmentNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n      }\n\n      /**\n       * get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var expr = this.expr.toString(options);\n        if (needParenthesis(this, parenthesis, options && options.implicit)) {\n          expr = '(' + expr + ')';\n        }\n        return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        var types = this.types;\n        return {\n          mathjs: name,\n          name: this.name,\n          params: this.params.map(function (param, index) {\n            return {\n              name: param,\n              type: types[index]\n            };\n          }),\n          expr: this.expr\n        };\n      }\n\n      /**\n       * Instantiate an FunctionAssignmentNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     ```\n       *     {\"mathjs\": \"FunctionAssignmentNode\",\n       *      name: ..., params: ..., expr: ...}\n       *     ```\n       *     where mathjs is optional\n       * @returns {FunctionAssignmentNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      function toHTML(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var params = [];\n        for (var i = 0; i < this.params.length; i++) {\n          params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n        }\n        var expr = this.expr.toHTML(options);\n        if (needParenthesis(this, parenthesis, options && options.implicit)) {\n          expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n      }\n\n      /**\n       * get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var expr = this.expr.toTex(options);\n        if (needParenthesis(this, parenthesis, options && options.implicit)) {\n          expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n        }\n        return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new FunctionAssignmentNode(json.name, json.params, json.expr);\n      }\n    }]);\n    return FunctionAssignmentNode;\n  }(Node);\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","keywords","escape","forEach","join","toSymbol","getPrecedence","factory","name","dependencies","createFunctionAssignmentNode","_ref","typed","Node","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","expr","FunctionAssignmentNode","params","TypeError","Array","isArray","has","Error","paramNames","Set","param","_name","concat","add","map","types","type","math","argNames","childArgNames","Object","create","evalExpr","_compile","signature","syntax","evalFunctionAssignmentNode","scope","args","context","signatures","childArgs","i","length","arguments","fn","set","callback","_ifNode","slice","options","toString","mathjs","index","push","toHTML","toTex","json","isClass"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/expression/node/FunctionAssignmentNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { keywords } from '../keywords.js';\nimport { escape } from '../../utils/string.js';\nimport { forEach, join } from '../../utils/array.js';\nimport { toSymbol } from '../../utils/latex.js';\nimport { getPrecedence } from '../operators.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'FunctionAssignmentNode';\nvar dependencies = ['typed', 'Node'];\nexport var createFunctionAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Node\n  } = _ref;\n  /**\n   * Is parenthesis needed?\n   * @param {Node} node\n   * @param {Object} parenthesis\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.expr, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class FunctionAssignmentNode extends Node {\n    /**\n     * @constructor FunctionAssignmentNode\n     * @extends {Node}\n     * Function assignment\n     *\n     * @param {string} name           Function name\n     * @param {string[] | Array.<{name: string, type: string}>} params\n     *                                Array with function parameter names, or an\n     *                                array with objects containing the name\n     *                                and type of the parameter\n     * @param {Node} expr             The function expression\n     */\n    constructor(name, params, expr) {\n      super();\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Array containing strings or objects expected for parameter \"params\"');\n      }\n      if (!isNode(expr)) {\n        throw new TypeError('Node expected for parameter \"expr\"');\n      }\n      if (keywords.has(name)) {\n        throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');\n      }\n      var paramNames = new Set();\n      for (var param of params) {\n        var _name = typeof param === 'string' ? param : param.name;\n        if (paramNames.has(_name)) {\n          throw new Error(\"Duplicate parameter name \\\"\".concat(_name, \"\\\"\"));\n        } else {\n          paramNames.add(_name);\n        }\n      }\n      this.name = name;\n      this.params = params.map(function (param) {\n        return param && param.name || param;\n      });\n      this.types = params.map(function (param) {\n        return param && param.type || 'any';\n      });\n      this.expr = expr;\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var childArgNames = Object.create(argNames);\n      forEach(this.params, function (param) {\n        childArgNames[param] = true;\n      });\n\n      // compile the function expression with the child args\n      var evalExpr = this.expr._compile(math, childArgNames);\n      var name = this.name;\n      var params = this.params;\n      var signature = join(this.types, ',');\n      var syntax = name + '(' + join(this.params, ', ') + ')';\n      return function evalFunctionAssignmentNode(scope, args, context) {\n        var signatures = {};\n        signatures[signature] = function () {\n          var childArgs = Object.create(args);\n          for (var i = 0; i < params.length; i++) {\n            childArgs[params[i]] = arguments[i];\n          }\n          return evalExpr(scope, childArgs, context);\n        };\n        var fn = typed(name, signatures);\n        fn.syntax = syntax;\n        scope.set(name, fn);\n        return fn;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.expr, 'expr', this);\n    }\n\n    /**\n     * Create a new FunctionAssignmentNode whose children are the results of\n     * calling the provided callback function for each child of the original\n     * node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionAssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var expr = this._ifNode(callback(this.expr, 'expr', this));\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionAssignmentNode}\n     */\n    clone() {\n      return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);\n    }\n\n    /**\n     * get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toString(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '(' + expr + ')';\n      }\n      return this.name + '(' + this.params.join(', ') + ') = ' + expr;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      var types = this.types;\n      return {\n        mathjs: name,\n        name: this.name,\n        params: this.params.map(function (param, index) {\n          return {\n            name: param,\n            type: types[index]\n          };\n        }),\n        expr: this.expr\n      };\n    }\n\n    /**\n     * Instantiate an FunctionAssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     ```\n     *     {\"mathjs\": \"FunctionAssignmentNode\",\n     *      name: ..., params: ..., expr: ...}\n     *     ```\n     *     where mathjs is optional\n     * @returns {FunctionAssignmentNode}\n     */\n    static fromJSON(json) {\n      return new FunctionAssignmentNode(json.name, json.params, json.expr);\n    }\n\n    /**\n     * get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var params = [];\n      for (var i = 0; i < this.params.length; i++) {\n        params.push('<span class=\"math-symbol math-parameter\">' + escape(this.params[i]) + '</span>');\n      }\n      var expr = this.expr.toHTML(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + expr + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return '<span class=\"math-function\">' + escape(this.name) + '</span>' + '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + params.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + expr;\n    }\n\n    /**\n     * get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var expr = this.expr.toTex(options);\n      if (needParenthesis(this, parenthesis, options && options.implicit)) {\n        expr = \"\\\\left(\".concat(expr, \"\\\\right)\");\n      }\n      return '\\\\mathrm{' + this.name + '}\\\\left(' + this.params.map(toSymbol).join(',') + '\\\\right):=' + expr;\n    }\n  }\n  _defineProperty(FunctionAssignmentNode, \"name\", name);\n  return FunctionAssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}