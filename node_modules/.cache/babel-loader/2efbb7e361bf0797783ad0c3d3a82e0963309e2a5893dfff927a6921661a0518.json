{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    };\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","gcdNumber","name","dependencies","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","gcdTypes","gcdManySignature","concat","referToSelf","self","a","b","args","res","i","length","_gcdBigNumber","x","y","gcd","SS","DS","Ss","isInt","Error","zero","isZero","r","mod","lt","neg"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}