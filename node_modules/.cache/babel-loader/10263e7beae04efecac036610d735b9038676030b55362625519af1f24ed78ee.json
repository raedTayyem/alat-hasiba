{"ast":null,"code":"import _classCallCheck from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n  var AccessorNode = /*#__PURE__*/function (_Node) {\n    _inherits(AccessorNode, _Node);\n    var _super = _createSuper(AccessorNode);\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    function AccessorNode(object, index) {\n      var _this;\n      _classCallCheck(this, AccessorNode);\n      _this = _super.call(this);\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n      _this.object = object;\n      _this.index = index;\n      return _this;\n    }\n\n    // readonly property name\n    _createClass(AccessorNode, [{\n      key: \"name\",\n      get: function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAccessorNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n        var evalIndex = this.index._compile(math, argNames);\n        if (this.index.isObjectProperty()) {\n          var prop = this.index.getObjectProperty();\n          return function evalAccessorNode(scope, args, context) {\n            // get a property from an object evaluated using the scope.\n            return getSafeProperty(evalObject(scope, args, context), prop);\n          };\n        } else {\n          return function evalAccessorNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            // we pass just object here instead of context:\n            var index = evalIndex(scope, args, object);\n            return access(object, index);\n          };\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n        callback(this.index, 'index', this);\n      }\n\n      /**\n       * Create a new AccessorNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AccessorNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AccessorNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AccessorNode(this.object, this.index);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n        if (needParenthesis(this.object)) {\n          object = '(' + object + ')';\n        }\n        return object + this.index.toString(options);\n      }\n\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"toHTML\",\n      value: function toHTML(options) {\n        var object = this.object.toHTML(options);\n        if (needParenthesis(this.object)) {\n          object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n        return object + this.index.toHTML(options);\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n        if (needParenthesis(this.object)) {\n          object = '\\\\left(\\' + object + \\'\\\\right)';\n        }\n        return object + this.index.toTex(options);\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index\n        };\n      }\n\n      /**\n       * Instantiate an AccessorNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n       *     where mathjs is optional\n       * @returns {AccessorNode}\n       */\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AccessorNode(json.object, json.index);\n      }\n    }]);\n    return AccessorNode;\n  }(Node);\n  _defineProperty(AccessorNode, \"name\", name);\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isNode","isObjectNode","isParenthesisNode","isSymbolNode","getSafeProperty","factory","accessFactory","name","dependencies","createAccessorNode","_ref","subset","Node","access","needParenthesis","node","AccessorNode","object","index","TypeError","isObjectProperty","getObjectProperty","math","argNames","evalObject","_compile","evalIndex","prop","evalAccessorNode","scope","args","context","callback","_ifNode","options","toString","toHTML","toTex","mathjs","json","isClass"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n  class AccessorNode extends Node {\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    constructor(object, index) {\n      super();\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n      this.object = object;\n      this.index = index;\n    }\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAccessorNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index._compile(math, argNames);\n      if (this.index.isObjectProperty()) {\n        var prop = this.index.getObjectProperty();\n        return function evalAccessorNode(scope, args, context) {\n          // get a property from an object evaluated using the scope.\n          return getSafeProperty(evalObject(scope, args, context), prop);\n        };\n      } else {\n        return function evalAccessorNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          // we pass just object here instead of context:\n          var index = evalIndex(scope, args, object);\n          return access(object, index);\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      callback(this.index, 'index', this);\n    }\n\n    /**\n     * Create a new AccessorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AccessorNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AccessorNode}\n     */\n    clone() {\n      return new AccessorNode(this.object, this.index);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      if (needParenthesis(this.object)) {\n        object = '(' + object + ')';\n      }\n      return object + this.index.toString(options);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      if (needParenthesis(this.object)) {\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return object + this.index.toHTML(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      if (needParenthesis(this.object)) {\n        object = '\\\\left(\\' + object + \\'\\\\right)';\n      }\n      return object + this.index.toTex(options);\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index\n      };\n    }\n\n    /**\n     * Instantiate an AccessorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n     *     where mathjs is optional\n     * @returns {AccessorNode}\n     */\n    static fromJSON(json) {\n      return new AccessorNode(json.object, json.index);\n    }\n  }\n  _defineProperty(AccessorNode, \"name\", name);\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}