{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    addScalar = _ref.addScalar,\n    combinations = _ref.combinations,\n    isPositive = _ref.isPositive,\n    isNegative = _ref.isNegative,\n    isInteger = _ref.isInteger,\n    larger = _ref.larger;\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createComposition","_ref","typed","addScalar","combinations","isPositive","isNegative","isInteger","larger","numberBigNumberNumberBigNumber","n","k","TypeError"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/function/combinatorics/composition.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    combinations,\n    isPositive,\n    isNegative,\n    isInteger,\n    larger\n  } = _ref;\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,CAAC;AAC5G,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAE,UAAAE,IAAI,EAAI;EAChF,IACEC,KAAK,GAOHD,IAAI,CAPNC,KAAK;IACLC,SAAS,GAMPF,IAAI,CANNE,SAAS;IACTC,YAAY,GAKVH,IAAI,CALNG,YAAY;IACZC,UAAU,GAIRJ,IAAI,CAJNI,UAAU;IACVC,UAAU,GAGRL,IAAI,CAHNK,UAAU;IACVC,SAAS,GAEPN,IAAI,CAFNM,SAAS;IACTC,MAAM,GACJP,IAAI,CADNO,MAAM;EAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAON,KAAK,CAACJ,IAAI,EAAE;IACjB,wCAAwC,EAAE,SAASW,8BAA8B,CAACC,CAAC,EAAEC,CAAC,EAAE;MACtF,IAAI,CAACJ,SAAS,CAACG,CAAC,CAAC,IAAI,CAACL,UAAU,CAACK,CAAC,CAAC,IAAI,CAACH,SAAS,CAACI,CAAC,CAAC,IAAI,CAACN,UAAU,CAACM,CAAC,CAAC,EAAE;QACtE,MAAM,IAAIC,SAAS,CAAC,yDAAyD,CAAC;MAChF,CAAC,MAAM,IAAIJ,MAAM,CAACG,CAAC,EAAED,CAAC,CAAC,EAAE;QACvB,MAAM,IAAIE,SAAS,CAAC,2DAA2D,CAAC;MAClF;MACA,OAAOR,YAAY,CAACD,SAAS,CAACO,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEP,SAAS,CAACQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}