{"ast":null,"code":"import _toConsumableArray from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/raed/Desktop/Alat Hasibah/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var math = _ref.math,\n    Node = _ref.Node,\n    SymbolNode = _ref.SymbolNode;\n  /* format to fixed length */\n  var strin = function strin(entity) {\n    return format(entity, {\n      truncate: 78\n    });\n  };\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  var FunctionNode = /*#__PURE__*/function (_Node) {\n    _inherits(FunctionNode, _Node);\n    var _super = _createSuper(FunctionNode);\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    function FunctionNode(fn, args) {\n      var _this;\n      _classCallCheck(this, FunctionNode);\n      _this = _super.call(this);\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      _this.fn = fn;\n      _this.args = args || [];\n      return _this;\n    }\n\n    // readonly property name\n    _createClass(FunctionNode, [{\n      key: \"name\",\n      get: function get() {\n        return this.fn.name || '';\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isFunctionNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        // compile arguments\n        var evalArgs = this.args.map(function (arg) {\n          return arg._compile(math, argNames);\n        });\n        if (isSymbolNode(this.fn)) {\n          var _name = this.fn.name;\n          if (!argNames[_name]) {\n            // we can statically determine whether the function\n            // has the rawArgs property\n            var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n            var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n            var resolveFn = function resolveFn(scope) {\n              var value;\n              if (scope.has(_name)) {\n                value = scope.get(_name);\n              } else if (_name in math) {\n                value = getSafeProperty(math, _name);\n              } else {\n                return FunctionNode.onUndefinedFunction(_name);\n              }\n              if (typeof value === 'function') {\n                return value;\n              }\n              throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n            };\n            if (isRaw) {\n              // pass unevaluated parameters (nodes) to the function\n              // \"raw\" evaluation\n              var rawArgs = this.args;\n              return function evalFunctionNode(scope, args, context) {\n                var fn = resolveFn(scope);\n                return fn(rawArgs, math, createSubScope(scope, args), scope);\n              };\n            } else {\n              // \"regular\" evaluation\n              switch (evalArgs.length) {\n                case 0:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    return fn();\n                  };\n                case 1:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    return fn(evalArg0(scope, args, context));\n                  };\n                case 2:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    var evalArg1 = evalArgs[1];\n                    return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                  };\n                default:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var values = evalArgs.map(function (evalArg) {\n                      return evalArg(scope, args, context);\n                    });\n                    return fn.apply(void 0, _toConsumableArray(values));\n                  };\n              }\n            }\n          } else {\n            // the function symbol is an argName\n            var _rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = args[_name];\n              if (typeof fn !== 'function') {\n                throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n              }\n              if (fn.rawArgs) {\n                // \"Raw\" evaluation\n                return fn(_rawArgs, math, createSubScope(scope, args), scope);\n              } else {\n                var values = evalArgs.map(function (evalArg) {\n                  return evalArg(scope, args, context);\n                });\n                return fn.apply(fn, values);\n              }\n            };\n          }\n        } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n          // execute the function with the right context:\n          // the object of the AccessorNode\n\n          var evalObject = this.fn.object._compile(math, argNames);\n          var prop = this.fn.index.getObjectProperty();\n          var _rawArgs2 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            validateSafeMethod(object, prop);\n            var isRaw = object[prop] && object[prop].rawArgs;\n            if (isRaw) {\n              // \"Raw\" evaluation\n              return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return object[prop].apply(object, values);\n            }\n          };\n        } else {\n          // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n          // we have to dynamically determine whether the function has the\n          // rawArgs property\n          var fnExpr = this.fn.toString();\n          var evalFn = this.fn._compile(math, argNames);\n          var _rawArgs3 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = evalFn(scope, args, context);\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.fn, 'fn', this);\n        for (var i = 0; i < this.args.length; i++) {\n          callback(this.args[i], 'args[' + i + ']', this);\n        }\n      }\n\n      /**\n       * Create a new FunctionNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {FunctionNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var fn = this._ifNode(callback(this.fn, 'fn', this));\n        var args = [];\n        for (var i = 0; i < this.args.length; i++) {\n          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n        }\n        return new FunctionNode(fn, args);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {FunctionNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new FunctionNode(this.fn, this.args.slice(0));\n      }\n\n      /**\n       * Throws an error 'Undefined function {name}'\n       * @param {string} name\n       */\n\n      /**\n       * Get string representation. (wrapper function)\n       * This overrides parts of Node's toString function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toString\n       * function.\n       *\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n    }, {\n      key: \"toString\",\n      value: function toString(options) {\n        var customString;\n        var name = this.fn.toString(options);\n        if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n          // callback is a map of callback functions\n          customString = options.handler[name](this, options);\n        }\n        if (typeof customString !== 'undefined') {\n          return customString;\n        }\n\n        // fall back to Node's toString\n        return _get(_getPrototypeOf(FunctionNode.prototype), \"toString\", this).call(this, options);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toString(options);\n        });\n        var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n        // format the arguments like \"add(2, 4.2)\"\n        return fn + '(' + args.join(', ') + ')';\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          fn: this.fn,\n          args: this.args\n        };\n      }\n\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n       *                       where mathjs is optional\n       * @returns {FunctionNode}\n       */\n\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"toHTML\",\n      value: function toHTML(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toHTML(options);\n        });\n\n        // format the arguments like \"add(2, 4.2)\"\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n\n      /**\n       * Get LaTeX representation. (wrapper function)\n       * This overrides parts of Node's toTex function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toTex\n       * function.\n       *\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"toTex\",\n      value: function toTex(options) {\n        var customTex;\n        if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n          // callback is a map of callback functions\n          customTex = options.handler[this.name](this, options);\n        }\n        if (typeof customTex !== 'undefined') {\n          return customTex;\n        }\n\n        // fall back to Node's toTex\n        return _get(_getPrototypeOf(FunctionNode.prototype), \"toTex\", this).call(this, options);\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var args = this.args.map(function (arg) {\n          // get LaTeX of the arguments\n          return arg.toTex(options);\n        });\n        var latexConverter;\n        if (latexFunctions[this.name]) {\n          latexConverter = latexFunctions[this.name];\n        }\n\n        // toTex property on the function itself\n        if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n          // .toTex is a callback function\n          latexConverter = math[this.name].toTex;\n        }\n        var customToTex;\n        switch (typeof latexConverter) {\n          case 'function':\n            // a callback function\n            customToTex = latexConverter(this, options);\n            break;\n          case 'string':\n            // a template string\n            customToTex = expandTemplate(latexConverter, this, options);\n            break;\n          case 'object':\n            // an object with different \"converters\" for different\n            // numbers of arguments\n            switch (typeof latexConverter[args.length]) {\n              case 'function':\n                customToTex = latexConverter[args.length](this, options);\n                break;\n              case 'string':\n                customToTex = expandTemplate(latexConverter[args.length], this, options);\n                break;\n            }\n        }\n        if (typeof customToTex !== 'undefined') {\n          return customToTex;\n        }\n        return expandTemplate(defaultTemplate, this, options);\n      }\n\n      /**\n       * Get identifier.\n       * @return {string}\n       */\n    }, {\n      key: \"getIdentifier\",\n      value: function getIdentifier() {\n        return this.type + ':' + this.name;\n      }\n    }]);\n    return FunctionNode;\n  }(Node);\n  _defineProperty(FunctionNode, \"name\", name);\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","format","hasOwnProperty","getSafeProperty","validateSafeMethod","createSubScope","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","strin","entity","truncate","expandTemplate","template","node","options","latex","regex","inputPos","match","exec","substring","index","length","property","ReferenceError","undefined","toTex","Array","isArray","map","arg","TypeError","join","slice","FunctionNode","fn","args","every","argNames","evalArgs","_compile","_name","isRaw","rawArgs","resolveFn","scope","value","has","get","onUndefinedFunction","concat","evalFunctionNode","context","evalArg0","evalArg1","values","evalArg","_rawArgs","apply","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs2","fnExpr","toString","evalFn","_rawArgs3","callback","i","_ifNode","customString","handler","mathjs","toHTML","customTex","latexConverter","customToTex","type","Error","json","isClass"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.fn = fn;\n      this.args = args || [];\n    }\n\n    // readonly property name\n    get name() {\n      return this.fn.name || '';\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n          var resolveFn = scope => {\n            var value;\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n            if (typeof value === 'function') {\n              return value;\n            }\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = args[_name];\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n\n        var evalObject = this.fn.object._compile(math, argNames);\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          validateSafeMethod(object, prop);\n          var isRaw = object[prop] && object[prop].rawArgs;\n          if (isRaw) {\n            // \"Raw\" evaluation\n            return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return object[prop].apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n        var evalFn = this.fn._compile(math, argNames);\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new FunctionNode(fn, args);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n\n      // fall back to Node's toString\n      return super.toString(options);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n      // format the arguments like \"add(2, 4.2)\"\n      return fn + '(' + args.join(', ') + ')';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      });\n\n      // format the arguments like \"add(2, 4.2)\"\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n    toTex(options) {\n      var customTex;\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      }\n\n      // fall back to Node's toTex\n      return super.toTex(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      }\n\n      // toTex property on the function itself\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n      var customToTex;\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n      }\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n      return expandTemplate(defaultTemplate, this, options);\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n  }\n  _defineProperty(FunctionNode, \"name\", name);\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}