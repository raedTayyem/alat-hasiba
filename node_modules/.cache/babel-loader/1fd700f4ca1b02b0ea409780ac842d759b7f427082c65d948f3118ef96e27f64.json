{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], function (_ref) {\n  var typed = _ref.typed;\n  return {\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (!x.equalBase(y)) {\n          throw new Error('Cannot compare units with different base');\n        }\n        return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n      };\n    })\n  };\n});","map":{"version":3,"names":["factory","createCompareUnits","_ref","typed","referToSelf","self","x","y","equalBase","Error","find","valueType","value"],"sources":["/home/raed/Desktop/Alat Hasibah/node_modules/mathjs/lib/esm/function/relational/compareUnits.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,OAAO,IAAIC,kBAAkB,GAAG,eAAeD,OAAO,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,EAAE,UAAAE,IAAI,EAAI;EACxF,IACEC,KAAK,GACHD,IAAI,CADNC,KAAK;EAEP,OAAO;IACL,YAAY,EAAEA,KAAK,CAACC,WAAW,CAAC,UAAAC,IAAI;MAAA,OAAI,UAACC,CAAC,EAAEC,CAAC,EAAK;QAChD,IAAI,CAACD,CAAC,CAACE,SAAS,CAACD,CAAC,CAAC,EAAE;UACnB,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;QAC7D;QACA,OAAON,KAAK,CAACO,IAAI,CAACL,IAAI,EAAE,CAACC,CAAC,CAACK,SAAS,EAAE,EAAEJ,CAAC,CAACI,SAAS,EAAE,CAAC,CAAC,CAACL,CAAC,CAACM,KAAK,EAAEL,CAAC,CAACK,KAAK,CAAC;MAC3E,CAAC;IAAA;EACH,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}